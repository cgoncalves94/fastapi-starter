[project]
name = "fastapi-starter"
version = "0.1.0"
description = "A modern FastAPI starter project with SQLModel, Pydantic v2, PostgreSQL, and Docker support"
license = {text = "MIT"}
authors = [
    {name = "cesaraugustogoncalves"}
]
requires-python = ">=3.13"
dependencies = [
    "alembic>=1.16.1",
    "asyncpg>=0.30.0",
    "bcrypt>=4.0.0",
    "fastapi>=0.115.12",
    "fastapi-cli>=0.0.7",
    "greenlet>=3.2.2",
    "pre-commit>=4.0.0",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.11.5",
    "pydantic[email]>=2.11.5",
    "pydantic-settings>=2.9.1",
    "pyjwt>=2.10.1",
    "python-multipart>=0.0.20",
    "requests>=2.32.0",
    "setuptools>=80.8.0",
    "sqlmodel>=0.0.24",
    "uv>=0.1.0",
    "uvicorn>=0.34.2",
    "python-dotenv>=1.1.0",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

# =======================
# MODERN LINTING & FORMATTING
# =======================

[tool.ruff]
# Modern Python linter (replaces flake8, isort, pylint, etc.)
target-version = "py313"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "migrations/",
    "__pycache__",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-args
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "ERA",    # flake8-eradicate
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",    # line too long (formatter handles this)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "SIM108",  # use ternary operator (sometimes less readable)
    "B008",    # function call in argument defaults (fine in FastAPI)
    "SIM102",  # nested if statements (sometimes clearer)
]

[tool.ruff.format]
# Modern formatter (replaces black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
# Import sorting
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true

[tool.ruff.lint.pyupgrade]
# Upgrade syntax for target Python version
keep-runtime-typing = true

[tool.mypy]
# Static type checker
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "sqlalchemy.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Modern testing configuration
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
# Code coverage configuration
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.bandit]
# Security linter
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]  # Skip assert_used test
